apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // Usage: testInstrumentationRunner "gr.aueb.konsolakis.library.instrumentation.BaristaInstrumentationTestRunner"

        // settings.gradle -> include ':app', '..:AuebAppLibrary:testing_library'
        // build.gradle (app) -> dependencies -> compile project(':..:AuebAppLibrary:testing_library')

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    //compile 'com.android.support:multidex:1.0.2'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}


def apkName = "app-debug.apk";
def apkPath = "" + projectDir + "/build/outputs/apk/" + apkName;
def adb = android.getAdbExe().toString()

task grantWmPermission(type:Exec) {
    workingDir '/'
    commandLine adb, 'shell', 'pm', 'grant', rootProject.ext.appId, 'android.permission.WRITE_SECURE_SETTINGS'

    standardOutput = new ByteArrayOutputStream()
}

grantWmPermission.doLast {
    println "grantWmPermissionResult: " + ((grantWmPermission.getStandardOutput().toString()=='') ? 'true' : grantWmPermission.getStandardOutput().toString())
}

task packageInstalled(type:Exec) {
    workingDir '/'
    commandLine adb, 'shell', 'pm', 'list', 'packages'

    standardOutput = new ByteArrayOutputStream()
}

task installApk(type:Exec) {
    workingDir '/'
    commandLine adb, 'install', '-r', apkPath

    standardOutput = new ByteArrayOutputStream()
}

task executeGrantPermission {

    def applicationId = rootProject.ext.appId

    if (applicationId != null && applicationId != '') {
        println "*******ExecuteGrantPermission*********"

        dependsOn packageInstalled

        doLast {
            String packages = packageInstalled.getStandardOutput().toString()

            println 'MyPackage: ' + applicationId
            println 'packages: ' + packages

            packages = packages.replace("package:"+applicationId+".test", "");
            if(packages.trim().length() == 0 || !packages.contains(applicationId)) {
                println "No package found"

                if(file(apkPath).exists()) {
                    tasks.installApk.execute()

                    println installApk.getStandardOutput().toString()
                    println "Packgage Installed!"
                } else {
                    //assert file(apkPath).exists()
                }
            }

            tasks.grantWmPermission.execute()
        }
    } else {
        println "application id error -> open morphdroid_library/build.gradle line 39."
    }
}

//preBuild.finalizedBy(executeGrantPermission)
/*tasks.assembleDebug.doLast {
    tasks.executeGrantPermission.execute()
}*/


/* Test Code */

//tasks.assembleDebug.finalizedBy(executeGrantPermission)

//assembleDebug << {
//println 'aaaaaa'
//executeGrantPermission.execute()
//}

//generateDebugSources , assembleDebugAndroidTest, packageDebugAndroidTest

/*
task grantWmPermission(type:Exec) {
    println 'grantWmPermission started'
    //println android.defaultConfig.applicationId
    //println System.getenv("PATH")

    //standardInput = System.in

    workingDir '/'

    //if(android.defaultTestDevice != '') {
    commandLine 'adb', 'shell', 'pm', 'grant', android.defaultConfig.applicationId, 'android.permission.WRITE_SECURE_SETTINGS'
    //} else {
    //  println 'empty default test device.'
    // commandLine 'adb', 'shell', 'pm', 'grant', android.defaultConfig.applicationId, 'android.permission.WRITE_SECURE_SETTINGS'
    //}

    //commandLine './mkconf.sh'
    //commandLine 'adb', 'shell', 'pm', 'grant', android.defaultConfig.applicationId, 'android.permission.WRITE_SECURE_SETTINGS'
    //commandLine  'adb', 'devices'

    //store the output instead of printing to the console:
    //standardOutput = new ByteArrayOutputStream()

    println 'execResult ' + execResult
    println 'stdOut ' + standardOutput.toString()
    println 'stdIn ' + standardInput.toString()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        //return 'result: ' + standardOutput.toString()
    }
}*/

//assembleAndroidTest.doLast(
//tasks.grantWmPermission.execute()
//)

/*task setHostnameProperty {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = "adb"
            }
            ext.hostname = os.toString()
        }
    }
}*/

/*
tasks.preBuild.doLast() {
    println 'deviceCheckDolast'

    dependsOn packageInstalled

    //doLast {
        String a = packageInstalled.getStandardOutput().toString()
        if(a.contains(android.defaultConfig.applicationId)) {
            println "Execute Grant WM Permission"
            tasks.grantWmPermission.execute()
        } else {
            println "No package found"

        }

        //println "dddddddddd: "+ packageInstalled.getStandardOutput().toString()
        //println "dddddddddd: "+ packageInstalled
    //}
}*/
/*
task testTask {
    println "testTaskkkkkk"
    List list = tasks.asList();
    for (Task item : list) {
        //System.out.println( item.getName());
       println item.getName();
    }

    dependsOn packageInstalled

    doLast {
        String a = packageInstalled.getStandardOutput().toString()
        if(a.contains(android.defaultConfig.applicationId)) {
            tasks.grantWmPermission.execute()
        } else {
            println "no"
        }

        println "dddddddddd: "+ packageInstalled.getStandardOutput().toString()
        println "dddddddddd: "+ packageInstalled
    }
}*/
//tasks.preBuild.finalizedBy(testTask)


/*task taskX(dependsOn: 'app:assembleDebugAndroidTest') << {
    println 'taskX'
}*/
/*
build.doLast {
    tasks.taskX.execute()

}*/

//tasks.grantWmPermission.mustRunAfter (tasks.assembleAndroidTest)
//tasks.assembleAndroidTest.dependsOn(grantWmPermission)

/*

task mpreBuild << {
   println 'do it before build'

   //stopTomcat.execute()

   //println 'before output'
   //stopTomcat.output()
   //println 'after'
}*/

//build.dependsOn mpreBuild
//grantWmPermission.dependsOn testInstrumentationRunner

/*task appStart(type: Exec, dependsOn: 'assembleDebugAndroidTest') {
    // linux
    //commandLine 'adb', 'shell', 'am', 'start', '-n', 'com.example/.MyActivity'
    println 'dddddddd'
    commandLine 'adb', 'devices'
    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
    // windows
    // commandLine 'cmd', '/c', 'adb', 'shell', 'am', 'start', '-n', 'com.example/.MyActivity'
}*/